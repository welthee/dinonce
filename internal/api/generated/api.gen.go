// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// Defines values for TicketLeaseState.
const (
	TicketLeaseStateClosed TicketLeaseState = "closed"
	TicketLeaseStateLeased TicketLeaseState = "leased"
)

// Defines values for TicketUpdateRequestState.
const (
	TicketUpdateRequestStateClosed   TicketUpdateRequestState = "closed"
	TicketUpdateRequestStateReleased TicketUpdateRequestState = "released"
)

// Error defines model for Error.
type Error struct {
	Code    string `json:"code"`
	Message string `json:"message"`
}

// LineageCreationRequest defines model for LineageCreationRequest.
type LineageCreationRequest struct {
	ExtId               string `json:"extId"`
	MaxLeasedNonceCount int    `json:"maxLeasedNonceCount"`
	StartLeasingFrom    *int   `json:"startLeasingFrom,omitempty"`
}

// LineageCreationResponse defines model for LineageCreationResponse.
type LineageCreationResponse struct {
	ExtId string `json:"extId"`
	Id    string `json:"id"`
}

// LineageGetResponse defines model for LineageGetResponse.
type LineageGetResponse struct {
	ExtId               string `json:"extId"`
	Id                  string `json:"id"`
	LeasedNonceCount    int    `json:"leasedNonceCount"`
	MaxLeasedNonceCount int    `json:"maxLeasedNonceCount"`
	MaxNonceValue       int    `json:"maxNonceValue"`
	NextNonce           int    `json:"nextNonce"`
	ReleasedNonceCount  int    `json:"releasedNonceCount"`
}

// TicketLease defines model for TicketLease.
type TicketLease struct {
	ExtId     string           `json:"extId"`
	LineageId string           `json:"lineageId"`
	Nonce     int              `json:"nonce"`
	State     TicketLeaseState `json:"state"`
}

// TicketLeaseState defines model for TicketLease.State.
type TicketLeaseState string

// TicketLeaseRequest defines model for TicketLeaseRequest.
type TicketLeaseRequest struct {
	ExtIds []string `json:"extIds"`
}

// TicketLeaseResponse defines model for TicketLeaseResponse.
type TicketLeaseResponse struct {
	Leases *[]TicketLease `json:"leases,omitempty"`
}

// TicketUpdateRequest defines model for TicketUpdateRequest.
type TicketUpdateRequest struct {
	State TicketUpdateRequestState `json:"state"`
}

// TicketUpdateRequestState defines model for TicketUpdateRequest.State.
type TicketUpdateRequestState string

// GetLineageByExtIdParams defines parameters for GetLineageByExtId.
type GetLineageByExtIdParams struct {
	ExtId string `form:"extId" json:"extId"`
}

// GetTicketsParams defines parameters for GetTickets.
type GetTicketsParams struct {
	TicketExtIds []string `form:"ticketExtIds" json:"ticketExtIds"`
}

// CreateLineageJSONRequestBody defines body for CreateLineage for application/json ContentType.
type CreateLineageJSONRequestBody = LineageCreationRequest

// LeaseTicketJSONRequestBody defines body for LeaseTicket for application/json ContentType.
type LeaseTicketJSONRequestBody = TicketLeaseRequest

// UpdateTicketJSONRequestBody defines body for UpdateTicket for application/json ContentType.
type UpdateTicketJSONRequestBody = TicketUpdateRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /lineages)
	GetLineageByExtId(ctx echo.Context, params GetLineageByExtIdParams) error

	// (POST /lineages)
	CreateLineage(ctx echo.Context) error

	// (GET /lineages/{lineageId}/tickets)
	GetTickets(ctx echo.Context, lineageId string, params GetTicketsParams) error
	// Lease tickets
	// (POST /lineages/{lineageId}/tickets)
	LeaseTicket(ctx echo.Context, lineageId string) error

	// (GET /lineages/{lineageId}/tickets/{ticketExtId})
	GetTicket(ctx echo.Context, lineageId string, ticketExtId string) error

	// (PATCH /lineages/{lineageId}/tickets/{ticketExtId})
	UpdateTicket(ctx echo.Context, lineageId string, ticketExtId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetLineageByExtId converts echo context to params.
func (w *ServerInterfaceWrapper) GetLineageByExtId(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLineageByExtIdParams
	// ------------- Required query parameter "extId" -------------

	err = runtime.BindQueryParameter("form", true, true, "extId", ctx.QueryParams(), &params.ExtId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter extId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLineageByExtId(ctx, params)
	return err
}

// CreateLineage converts echo context to params.
func (w *ServerInterfaceWrapper) CreateLineage(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateLineage(ctx)
	return err
}

// GetTickets converts echo context to params.
func (w *ServerInterfaceWrapper) GetTickets(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "lineageId" -------------
	var lineageId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "lineageId", runtime.ParamLocationPath, ctx.Param("lineageId"), &lineageId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter lineageId: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTicketsParams
	// ------------- Required query parameter "ticketExtIds" -------------

	err = runtime.BindQueryParameter("form", true, true, "ticketExtIds", ctx.QueryParams(), &params.TicketExtIds)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ticketExtIds: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTickets(ctx, lineageId, params)
	return err
}

// LeaseTicket converts echo context to params.
func (w *ServerInterfaceWrapper) LeaseTicket(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "lineageId" -------------
	var lineageId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "lineageId", runtime.ParamLocationPath, ctx.Param("lineageId"), &lineageId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter lineageId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LeaseTicket(ctx, lineageId)
	return err
}

// GetTicket converts echo context to params.
func (w *ServerInterfaceWrapper) GetTicket(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "lineageId" -------------
	var lineageId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "lineageId", runtime.ParamLocationPath, ctx.Param("lineageId"), &lineageId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter lineageId: %s", err))
	}

	// ------------- Path parameter "ticketExtId" -------------
	var ticketExtId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ticketExtId", runtime.ParamLocationPath, ctx.Param("ticketExtId"), &ticketExtId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ticketExtId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTicket(ctx, lineageId, ticketExtId)
	return err
}

// UpdateTicket converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateTicket(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "lineageId" -------------
	var lineageId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "lineageId", runtime.ParamLocationPath, ctx.Param("lineageId"), &lineageId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter lineageId: %s", err))
	}

	// ------------- Path parameter "ticketExtId" -------------
	var ticketExtId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ticketExtId", runtime.ParamLocationPath, ctx.Param("ticketExtId"), &ticketExtId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ticketExtId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateTicket(ctx, lineageId, ticketExtId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/lineages", wrapper.GetLineageByExtId)
	router.POST(baseURL+"/lineages", wrapper.CreateLineage)
	router.GET(baseURL+"/lineages/:lineageId/tickets", wrapper.GetTickets)
	router.POST(baseURL+"/lineages/:lineageId/tickets", wrapper.LeaseTicket)
	router.GET(baseURL+"/lineages/:lineageId/tickets/:ticketExtId", wrapper.GetTicket)
	router.PATCH(baseURL+"/lineages/:lineageId/tickets/:ticketExtId", wrapper.UpdateTicket)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9RXXW/bNhT9KwS3p0GxVDuLV721RVYMKPawdXuY4QGMdC2xk0iFvHLiGfrvA0nJkm3K",
	"doa42J6iiFf345zDQ3pLE1lWUoBATeMt1UkOJbOP90pJZR4qJStQyMG+TmQK5i9uKqAx1ai4yGgT0BK0",
	"ZplvrQmogseaK0hpvHAZ+vhl0MXLhy+QoMn1iQtgGXxQwJBL8Qs81qDxuBl4xp9S+5ohghI0pn8u2M3f",
	"727+iG7ehjfL72jg6ZQ9fwKmIf1ZigQ+yFrY1CmsWF0gje9ubQwv65LGs+n8bh7Qkgv3/5tdQi4QMlAm",
	"o0am0OTkIvtRyXIvXTTI9nY6nc3m02h298P3t/P5XRRFg9zRce4D7NzA/hEuAlJXUmg4geQRWjw9Tyk3",
	"PbkUy77qR8BXKxjQwkPZMRMj3HoDbcjvrKjBHyLgGW2Mf1nBJS2NIzUs4BnPW8A/4OE0AV2D0lwKy8Zn",
	"nvwFVp0voqFwJI6sinFcNDK0SyCMqBftaDSgSSHNwzI4I6e+9ACrFieX3af1wZynDcM+cYRSe0drXzCl",
	"2Ma/AfX5+mOyt1jsN/CtghWN6Tdhb8Vh68PhkDtfayNN/FalDMdROGKoU9oLOBrjwcRxsZLOAnWieGWc",
	"h8Zta1xk5FdQa1DGmjkW4F/qFBzTN5NoEpnZZAWCVZzGdDaJJjMaGNvP7URhKxn7TwZ2ZjOxdT0jYfoR",
	"sLWl95v7VlMVU6wEBKVpvNhSbqo91qA2Rm+sNJ118utHR1VD0B6UPmdcmmBHv+1mGkXu3BQIziJYVRU8",
	"sa2FX7SZcTvId0oOHmO1gO8D3UYRBag4rCF1QZXUHlzs0QDtJ+2goPG9TDev3fbhcd7sa8oA21wfvKOz",
	"8ASCiQXH4tcEvcjC7c6hmhCtdk8K73Mb4lecEXEvuKH3XS66wK9e19u986xT+S52w2uq22egHnLekYJr",
	"JHJFWugJ10brtRKQEpQEcyBJwUHgxExwG92OmZEmTxxz+0HG1yCIs3eSStBESCQ5WwNhgrAE+RqIVMT5",
	"I7F+OdnfWAcaMhFECvtVycSma5cGBwqxka6hK0pkeZ297Tl1v/K+vlA2LswRR1jSdmf18Xq9uB9NnuoP",
	"LCVqh09AdV2WTG12Oum0cdZnwu1gUzfnXecrmM5+rkF7/5lz81KJ5B0RJGd6fN+Tp5wn+b+ynb6Cz3le",
	"ajwMk/yYe3f7+z/Sfy172r8PX+RPo2cGMTffWpPa5kwJE6lRAnDMQZHuJm1f298s5IkXBXkw1zGmNc+M",
	"WnZ0WiKbpvknAAD//8Xes0GIEQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
